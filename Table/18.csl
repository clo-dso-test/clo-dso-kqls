//Table//LA//
let startDate = startofday(datetime_utc_to_local(now(), 'Asia/Seoul') - 14d); // 2주전 00:00:00(KST)부터
let endDate = startofday(datetime_utc_to_local(now(), 'Asia/Seoul')) - 1s; // 전일까지 23:59:59(KST)까지
let Incident = SecurityIncident 
| extend KST_Time = datetime_utc_to_local(TimeGenerated, 'Asia/Seoul') // UTC -> KST 변환
| where KST_Time between (startDate .. endDate) 
//| where not(Title contains "Reflective DLL Loading" or Title contains "Suspicious LDAP Query" or Title contains "Multi-stage incident involving")
| summarize arg_max(KST_Time, Severity, Title, ProviderName) by IncidentNumber
| where Severity != "Informational" // 정보제공 심각도 제외
| extend DaysAgo = bin(datetime_diff('day', datetime_utc_to_local(now()-1d, 'Asia/Seoul'), KST_Time), 7);
let LastWeek = Incident// 전주
| where DaysAgo == 7
| summarize LastWeek_Total=count(Title) by Severity, Title, ProviderName
| order by LastWeek_Total desc
| limit 5
| extend LastWeek_Rank=row_number();
let ThisWeek = Incident// 금주
| where DaysAgo == 0
| summarize ThisWeek_Total=count(Title) by Severity, Title, ProviderName
| order by ThisWeek_Total desc
| limit 5
| extend ThisWeek_Rank=row_number();
ThisWeek // 금주 데이터를 기준으로 전주 데이터와 조인
| join kind=leftouter (
    LastWeek
) on Title
| extend Rank_Change = case(
    isnotempty(LastWeek_Rank) and ThisWeek_Rank == LastWeek_Rank, "-",             // 동일한 순위일 경우 '-'
    isnotempty(LastWeek_Rank), 
        strcat(
            iff(ThisWeek_Rank - LastWeek_Rank < 0, "+", "-"),                     // 순위 상승/하락 여부
            tostring(abs(ThisWeek_Rank - LastWeek_Rank))                         // 순위 변동 절대값
        ),
    "New"                                                                        // 전주에 없으면 New
)
| project Rank=ThisWeek_Rank, Severity, Title, ProviderName, Total_Alert=ThisWeek_Total, Rank_Change // 최종 컬럼 선택
| order by Total_Alert desc
